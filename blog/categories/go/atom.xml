<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | AmaL'sbLoG]]></title>
  <link href="http://blog.amalcao.me/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://blog.amalcao.me/"/>
  <updated>2016-03-15T22:10:58+08:00</updated>
  <id>http://blog.amalcao.me/</id>
  <author>
    <name><![CDATA[Amal Cao]]></name>
    <email><![CDATA[amalcaowei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go 语言对OS系统调用的处理]]></title>
    <link href="http://blog.amalcao.me/blog/2014/05/22/go-yu-yan-dui-osxi-tong-diao-yong-de-chu-li/"/>
    <updated>2014-05-22T12:01:32+08:00</updated>
    <id>http://blog.amalcao.me/blog/2014/05/22/go-yu-yan-dui-osxi-tong-diao-yong-de-chu-li</id>
    <content type="html"><![CDATA[<blockquote><p><em>上回讲Goroutine状态变换的时候，遗留了一部分关于Syscall处理的内容，这次打算把Go语言对Syscall的处理机制系统的总结一下，放在今天这篇文章中。</em></p></blockquote>

<h2>Go 语言库对Syscall的封装</h2>

<p>我们知道Go是一门面向系统级开发的Native编程语言，与C/C++ 类似，Go的编译器会直接将程序编译、链接成本地可执行文件。理论上，它可以完成任何C/C++语言能完成的。作为支撑该特性的重要方面，Go以标准库形式提供了<a href="http://golang.org/pkg/syscall">syscall包</a>，用来支持OS级系统调用。</p>

<p>首先，Go对各种系统调用接口进行了封装，提供给用户一组Go语言函数，方便在程序中直接调用，如：</p>

<p><code>go
func Read(fd int, p []byte) (n int, err error)
func Write(fd int, p []byte) (n int, err error)
</code></p>

<p>同时，Go还通过以下函数提供了对Syscall的直接调用支持：</p>

<p>``` go
func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)</p>

<p>func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
```</p>

<p>其中，带有<code>Raw</code>前缀的一组操作表示直接调用syscall （<em>注：以Linux为例，在AMD64中是通过<code>syscall</code>指令实现，在X86中是<code>int 0x80</code>软中断，而ARM中则是采用<code>SWI</code>软中断实现系统调用</em>），而不带<code>Raw</code>前缀的操作则在真正调用syscall前会先调用<code>runtime·entersyscall</code>，并在syscall返回后插入<code>runtime·exitsyscall</code>。这两个辅助函数的功能我们在前面介绍调度器时已经说过了，后面还会再提。</p>

<p>这4个函数全都是用汇编语言实现的，并且和具体的硬件架构及OS相关，比如Linux下ARM架构的相应实现，在 <code>src/pkg/syscall/asm_linux_arm.s</code>中。至于其他的如<code>Read/Write</code>这类的函数，其内部<strong>基本上</strong>都调用上面的4个函数实现的。</p>

<h2>运行时支持</h2>

<p>我们之前讲了很多次，Go语言runtime为了实现较高的并发度，对OS系统调用做了一些优化，主要就体现在<code>runtime·entersyscall</code>和入<code>runtime·exitsyscall</code>这两个函数上，它们的实现代码在<code>src/pkg/runtime/proc.c</code>之中，之前我们已经多次讨论过这个文件了。</p>

<p>在分析实现代前，我们先来看看函数的声明，位置在<code>src/pkg/runtime/runtime.h</code>中：</p>

<p><code>c++
void runtime·entersyscall(void);
void runtime·entersyscallblock(void);
void runtime·exitsyscall(void);
</code></p>

<p>这里声明了3个函数，多了一个<code>void runtime·entersyscallblock(void)</code>，在后面会分析它的功能和使用情况。</p>

<p>好了，现在来看实现代码。首先，我们很容易找到了<code>void runtime·exitsyscall(void)</code> 的实现，而另外两个却找不到，只是找到了两个与之向接近的函数定义，分别是：</p>

<p><code>c++
void ·entersyscall(int dummy) { ... }
void ·entersyscallblock(int dummy) { ... }
</code></p>

<p>通过反汇编分析，我发现代码中所有对<code>runtime·entersyscall</code>和<code>runtime·entersyscallblock</code>的调用最后都分别映射到了<code>·entersyscall</code> 和<code>·entersyscallblock</code>，也就是说前面两个函数分别是后面两个函数的别名。至于为什么这样实现，我没有找到相关的文档说明，但感觉应该主要是由于前后两组函数参数不同的关系 —— 函数调用本身是不需要传入参数的，而函数实现时，无中生有了一个<code>dummy</code>参数，其目的就是为了通过该参数指针（地址）方便定位调用者的PC和SP值。</p>

<h3>runtime·entersyscall</h3>

<p>好了，我们回到函数实现分析上来，看看进入系统调用前，runtime究竟都做了那些特别处理。下面将这个函数分成3段进行分析：</p>

<ul>
<li><p>首先，函数通过“pragma”将该函数声明为“NOSPLIT”，令其中的函数调用不触发栈扩展检查。</p>

<p>  刚进入函数，先禁止抢占，然后通过<code>dummy</code>参数获得调用者的SP和PC值（<em>通过<code>save</code>函数保存到<code>g-&gt;sched.sp</code>和<code>g-&gt;sched.pc</code></em>），将其分别保存到groutine的<code>syscallsp</code>和<code>syscallpc</code>字段，同时记录的字段还有<code>syscallstack</code>和<code>syscallguard</code>。这些字段的功能主要是使得垃圾收集器明确栈分析的边界 —— 对于正在进行系统调用的任务，只对其进入系统调用前的栈进行“标记-清除”。（<em>实际上，Go语言的cgo机制也利用了<code>entersyscall</code>，因而cgo运行的代码不受垃圾收集机制管理。</em>）</p>

<p>  然后，Goroutine的状态切换到<code>Gsyscall</code>状态。</p></li>
</ul>


<p>``` c++</p>

<h1>pragma textflag NOSPLIT</h1>

<p>void
·entersyscall(int32 dummy)
{</p>

<pre><code>// Disable preemption because during this function g is in Gsyscall status,
// but can have inconsistent g-&gt;sched, do not let GC observe it.
m-&gt;locks++;

// Leave SP around for GC and traceback.
save(runtime·getcallerpc(&amp;dummy), runtime·getcallersp(&amp;dummy));
g-&gt;syscallsp = g-&gt;sched.sp;
g-&gt;syscallpc = g-&gt;sched.pc;
g-&gt;syscallstack = g-&gt;stackbase;
g-&gt;syscallguard = g-&gt;stackguard;
g-&gt;status = Gsyscall;
if(g-&gt;syscallsp &lt; g-&gt;syscallguard-StackGuard || g-&gt;syscallstack &lt; g-&gt;syscallsp) {
    // runtime·printf("entersyscall inconsistent %p [%p,%p]\n",
    //  g-&gt;syscallsp, g-&gt;syscallguard-StackGuard, g-&gt;syscallstack);
    runtime·throw("entersyscall");
}
</code></pre>

<p>```</p>

<ul>
<li>下面的代码是唤醒runtime的后台监控线程<code>sysmon</code>，在之前讲调度器的时候说过，<code>sysmon</code>会监控所有执行syscall的线程M，一旦超过某个时间阈值，就将该M与对应的P解耦。</li>
</ul>


<p>``` c++</p>

<pre><code>if(runtime·atomicload(&amp;runtime·sched.sysmonwait)) {  // TODO: fast atomic
    runtime·lock(&amp;runtime·sched);
    if(runtime·atomicload(&amp;runtime·sched.sysmonwait)) {
        runtime·atomicstore(&amp;runtime·sched.sysmonwait, 0);
        runtime·notewakeup(&amp;runtime·sched.sysmonnote);
    }
    runtime·unlock(&amp;runtime·sched);
    save(runtime·getcallerpc(&amp;dummy), runtime·getcallersp(&amp;dummy));
}
</code></pre>

<p>```</p>

<ul>
<li><p>将M的<code>mcache</code>字段置空，并将P的<code>m</code>字段置空，将P的状态切换到<code>Psyscall</code>（注意，与G类似，P也存在若干状态的切换，<code>Psyscall</code> 和 <code>Pgcstop</code>都是其中的状态）。</p>

<p>  检查系统此刻是否需要进行“垃圾收集”，注意，syscall和gc是可以并行执行的。</p>

<p>  由于处于syscall状态的任务是不能进行栈分裂的，因此通过<code>g-&gt;stackguard0 = StackPreempt</code>使得后续操作时，一旦出现意外调用了栈分裂操作，都会进入 runtime的<code>morestack</code>函数并捕获到错误。最后别忘记重新使能任务抢占。</p></li>
</ul>


<p>``` c++</p>

<pre><code>m-&gt;mcache = nil;
m-&gt;p-&gt;m = nil;
runtime·atomicstore(&amp;m-&gt;p-&gt;status, Psyscall);
if(runtime·sched.gcwaiting) {
    runtime·lock(&amp;runtime·sched);
    if (runtime·sched.stopwait &gt; 0 &amp;&amp; runtime·cas(&amp;m-&gt;p-&gt;status, Psyscall, Pgcstop)) {
        if(--runtime·sched.stopwait == 0)
            runtime·notewakeup(&amp;runtime·sched.stopnote);
    }
    runtime·unlock(&amp;runtime·sched);
    save(runtime·getcallerpc(&amp;dummy), runtime·getcallersp(&amp;dummy));
}

// Goroutines must not split stacks in Gsyscall status (it would corrupt g-&gt;sched).
// We set stackguard to StackPreempt so that first split stack check calls morestack.
// Morestack detects this case and throws.
g-&gt;stackguard0 = StackPreempt;
m-&gt;locks--;
</code></pre>

<p>}
```</p>

<p><em>这里提一个问题：为什么每次调用<code>runtime·lock(&amp;runtime.sched)</code>及<code>runtime·unlock(&amp;runtime·sched)</code>后，都要重新调用<code>save</code>保存SP和PC值呢？</em></p>

<h3>runtime·entersyscallblock</h3>

<p>与 <code>·entersyscall</code>函数不同，<code>·entersyscallblock</code>在一开始就认为当前执行的syscall 会执行一个相对比较长的时间，因此在进入该函数后，就进行了M和P的解耦操作，无需等待<code>sysmon</code>处理。</p>

<ul>
<li>该函数第一部分与<code>·entersyscall</code>函数类似：</li>
</ul>


<p>``` c++</p>

<h1>pragma textflag NOSPLIT</h1>

<p>void
·entersyscallblock(int32 dummy)
{</p>

<pre><code>P *p;

m-&gt;locks++;  // see comment in entersyscall

// Leave SP around for GC and traceback.
save(runtime·getcallerpc(&amp;dummy), runtime·getcallersp(&amp;dummy));
g-&gt;syscallsp = g-&gt;sched.sp;
g-&gt;syscallpc = g-&gt;sched.pc;
g-&gt;syscallstack = g-&gt;stackbase;
g-&gt;syscallguard = g-&gt;stackguard;
g-&gt;status = Gsyscall;
if(g-&gt;syscallsp &lt; g-&gt;syscallguard-StackGuard || g-&gt;syscallstack &lt; g-&gt;syscallsp) {
    // runtime·printf("entersyscall inconsistent %p [%p,%p]\n",
    //  g-&gt;syscallsp, g-&gt;syscallguard-StackGuard, g-&gt;syscallstack);
    runtime·throw("entersyscallblock");
}
</code></pre>

<p>```</p>

<ul>
<li>后面的部分就不太一样了，基本上就是直接将当前M与P解耦，P重新回到<code>Pidle</code>状态。</li>
</ul>


<p>``` c++</p>

<pre><code>p = releasep();
handoffp(p);
if(g-&gt;isbackground)  // do not consider blocked scavenger for deadlock detection
    incidlelocked(1);

// Resave for traceback during blocked call.
save(runtime·getcallerpc(&amp;dummy), runtime·getcallersp(&amp;dummy));

g-&gt;stackguard0 = StackPreempt;  // see comment in entersyscall
m-&gt;locks--;
</code></pre>

<p>}
```</p>

<p>前面说过，所有<code>syscall</code>包中的系统调用封装都只调用了<code>runtime·entersyscall</code>，那么<code>runtime·entersyscallblock</code>的使用场景是什么呢？</p>

<p>通过查找，发现Go1.2中，仅有的一处对<code>runtime·entersyscallblock</code>的使用来自<code>bool runtime.notetsleepg(Note *n, int64 ns)</code>中（<em>当然，针对不同的OS平台有Futex和Sema两种不同的实现</em>）。<code>Note</code>类型在Go中主要提供一种“通知-唤醒”机制，有点类似PThread中的“条件变量”。 为了实现高并发度，Go不但实现了线程级的阻塞，还提供了Goroutine级阻塞，使得一个运行的Goroutine也可以阻塞在一个<code>Note</code>上 —— 对应的P会解耦释放，因此系统整体并发性不会收到影响。</p>

<p>上述机制在runtime中多有使用，比如在“定时器”模块中 —— 后面有机会会详细介绍。</p>

<h3>runtime·exitsyscall</h3>

<p>该函数主要的功能是从syscall状态恢复，其结构比较清晰，主要分为两个步骤：</p>

<ul>
<li>尝试调用<code>exitsyscallfast</code>函数，假设对应的M与P没有完全解耦，那么该操作会重新将M与P绑定；否则尝试获取另一个空闲的P并与当前M绑定。如果绑定成功，返回<code>true</code>，否则返回<code>false</code>，留待<code>runtime·exitsyscall</code>做后续处理。
  代码如下：</li>
</ul>


<p>``` c++
// The goroutine g exited its system call.
// Arrange for it to run on a cpu again.
// This is called only from the go syscall library, not
// from the low-level system calls used by the runtime.</p>

<h1>pragma textflag NOSPLIT</h1>

<p>void
runtime·exitsyscall(void)
{</p>

<pre><code>m-&gt;locks++;  // see comment in entersyscall

if(g-&gt;isbackground)  // do not consider blocked scavenger for deadlock detection
    incidlelocked(-1);

if(exitsyscallfast()) {
    // There's a cpu for us, so we can run.
    m-&gt;p-&gt;syscalltick++;
    g-&gt;status = Grunning;
    // Garbage collector isn't running (since we are),
    // so okay to clear gcstack and gcsp.
    g-&gt;syscallstack = (uintptr)nil;
    g-&gt;syscallsp = (uintptr)nil;
    m-&gt;locks--;
    if(g-&gt;preempt) {
        // restore the preemption request in case we've cleared it in newstack
        g-&gt;stackguard0 = StackPreempt;
    } else {
        // otherwise restore the real stackguard, we've spoiled it in entersyscall/entersyscallblock
        g-&gt;stackguard0 = g-&gt;stackguard;
    }
    return;
}

m-&gt;locks--;
</code></pre>

<p>```</p>

<ul>
<li>如果<code>exitsyscallfast</code>函数失败，则需要将当前的groutine放回到任务队列中等待被其他“M&amp;P”调度执行，通过上一讲我们知道，类似的操作必须在g0的栈上执行，因此需要使用<code>runtime.mcall</code>来完成，代码如下：</li>
</ul>


<p>``` c++</p>

<pre><code>// Call the scheduler.
runtime·mcall(exitsyscall0);

// Scheduler returned, so we're allowed to run now.
// Delete the gcstack information that we left for
// the garbage collector during the system call.
// Must wait until now because until gosched returns
// we don't know for sure that the garbage collector
// is not running.
g-&gt;syscallstack = (uintptr)nil;
g-&gt;syscallsp = (uintptr)nil;
m-&gt;p-&gt;syscalltick++;
</code></pre>

<p>}
```</p>

<ul>
<li>我们再仔细看看<code>exitsyscall0</code>的实现，和runtime的其他部分类似，M对于放弃执行总是有点不太情愿，所以首先还是会先看看有没有空闲的P，如果还是没有，只好将groutine放回全局任务队列中，如果当前M与G是绑定的，那M必须阻塞直到有空闲P可用才能被唤醒执行；如果M没有与G绑定，则M线程结束。
  最后，当这个goroutine被再次调度执行时，会返回到<code>runtime.mcall</code>调用后的代码处，做一些后续的清理工作 —— 将<code>syscallstack</code>和<code>syscallsp</code>字段清楚以保证GC的正确执行；对P的<code>syscalltick</code>字段增1。</li>
</ul>


<h2>一点说明</h2>

<p>Go语言之所以设计了M及P这两个概念，并对执行syscall的线程进行特别处理，适当进行M和P的解耦，主要是为了提高并发度，降低频繁、长时间的阻塞syscall带来的问题。但是必须意识到，这种机制本身也存在一定的开销，比如任务迁移可能影响CACHE、TLB的性能。</p>

<p>所以在实现中，并非所有的系统调用之前都会先调用<code>·entersyscall</code>。</p>

<p>对于runtime中的一些底层syscall，比如所有的底层锁操作 —— 在Linux中使用的是<a href="http://en.wikipedia.org/wiki/Futex">Futex</a>机制 —— 相应的Lock/Unlock操作都使用了底层系统调用，此时线程会直接调用syscall而不需要其他的操作，这样主要是保证底层代码的高效执行。</p>

<p>一些不容易造成执行线程阻塞的系统调用，在Go的<code>syscall</code>包中，通过<code>RawSyscall</code>进行封装，也不会调用<code>runtime·entersyscall</code>和<code>runtime·exitsyscall</code>提供的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Go语言调度器实现细节的补充分析]]></title>
    <link href="http://blog.amalcao.me/blog/2014/05/16/guan-yu-goyu-yan-diao-du-qi-shi-xian-xi-jie-de-bu-chong-fen-xi/"/>
    <updated>2014-05-16T09:23:44+08:00</updated>
    <id>http://blog.amalcao.me/blog/2014/05/16/guan-yu-goyu-yan-diao-du-qi-shi-xian-xi-jie-de-bu-chong-fen-xi</id>
    <content type="html"><![CDATA[<blockquote><p><em>在之前的<a href="http://blog.amalcao.me/blog/2014/05/09/erlang-and-go-de-bing-fa-diao-du-qian-xi/">一篇博文</a>中，简单的介绍了一下Go调度器的原理。而进行了一番深入分析后，发现Go的调度器代码中存在许多值得玩味的细节，不仔细体会可能很难发觉作者的匠心。原本打算再写一篇文章系统的分析一下这些细节，但无意中发现了另一位爱好Go的朋友已经做类似的工作，并且结构非常清晰，内容也较准确（链接在<a href="https://github.com/tiancaiamao/go-internals">这里</a>），为了避免造成雷同就放弃了之前的计划，转而罗列一些个人认为的Go语言中比较有意思的点，分别展开介绍一下。文章结构随性，如果感觉缺少联系，请参考其他资料。</em></p></blockquote>

<h2>Goroutine 状态的演变</h2>

<p>在讲解操作系统进程调度的部分时，几乎所有的书籍都会先列出一张进程的状态迁移图，通过状态图，能很清晰的把进程调度的每个环节串联起来，方便理解。</p>

<p>Go运行时的调度器其实可以看成OS调度器的某种简化版本，一个goroutine在其生命周期之中，同样包含了各种状态的变换。弄清了这些状态及状态间切换的原理，对搞清整个Go调度器会非常有帮助。</p>

<p>好了，以下是我总结的一张goroutine的状态迁移图，圆形框表示状态，箭头及文字信息表示切换的方向和条件：</p>

<p><img class="center" src="/images/2014/goroutine_states.jpeg"></p>

<p>下面来简单分析一下， 其中状态 <code>Gidle</code> 在Go调度器代码中并没有被真正被使用到，所以直接忽略。事实上，一旦runtime新建了一个goroutine结构，就会将其状态置为<code>Grunnable</code>并加入到任务队列中，因此我们以该状态作为起点进行介绍：</p>

<ul>
<li><p><code>Grunnable</code>: Go 语言中，包括用户入口函数<code>main·main</code>的执行goroutine在内的所有任务，都是通过<code>runtime·newproc</code>/<code>runtime·newproc1</code> 这两个函数创建的，前者其实就是对后者的一层封装，提供可变参数支持，Go语言的<code>go</code>关键字最终会被编译器映射为对<code>runtime·newproc</code>的调用。当<code>runtime·newproc1</code>完成了资源的分配及初始化后，新任务的状态会被置为<code>Grunnable</code>，然后被添加到当前 <code>P</code> 的私有任务队列中，等待调度执行。</p>

<p>  从图中我们可以看到，还有几条通向<code>Grunnable</code>的路径：当某个阻塞任务（状态为<code>Gwaiting</code>）的等待条件满足而被唤醒时——如一个任务<strong>G#1</strong>向某个channel写入数据将唤醒之前等待读取该channel数据的任务<strong>G#2</strong>——<strong>G#1</strong>通过调用<code>runtime·ready</code>将<strong>G#2</strong>状态重新置为<code>Grunnable</code>并添加到任务队列中。关于任务阻塞，稍后还很详细介绍。另外的路径是从<code>Grunning</code>和<code>Gsyscall</code>状态变换到<code>Grunnable</code>，我们也都合并到后面介绍。</p>

<p>  总之，处于<code>Grunnable</code>的任务一定在某个任务队列中，随时等待被调度执行。</p></li>
<li><p><code>Grunning</code>: 所有状态为<code>Grunnable</code>的任务都可能通过<code>findrunnable</code>函数被调度器（P&amp;M）获取，进而通过<code>execute</code>函数将其状态切换到<code>Grunning</code>, 最后调用<code>runtime·gogo</code>加载其上下文并执行。</p>

<p>  前面讲过Go本质采用一种协作式调度方案，一个正在运行的任务，需要通过调用<code>yield</code>的方式显式让出处理器；在Go1.2之后，运行时也开始支持一定程度的任务抢占——当系统线程<code>sysmon</code>发现某个任务执行时间过长或者runtime判断需要进行垃圾收集时，会将任务置为”可被抢占“的，当该任务下一次函数调用时，就会让出处理器并重新切会到<code>Grunnable</code>状态。关于Go1.2中抢占机制的实现细节，后面又机会再做介绍。</p></li>
<li><p><code>Gsyscall</code>: 这个状态其实在介绍调度器那篇文章中就已经提及了——Go运行时为了保证高的并发性能，当会在任务执行OS系统调用前，先调用<code>runtime·entersyscall</code>函数将自己的状态置为<code>Gsyscall</code>——如果系统调用是阻塞式的或者执行过久，则将当前<code>M</code>与<code>P</code>分离——当系统调用返回后，执行线程调用<code>runtime·exitsyscall</code>尝试重新获取<code>P</code>，如果成功且当前任务没有被抢占，则将状态切回<code>Grunning</code>并继续执行；否则将状态置为<code>Grunnable</code>，等待再次被调度执行。</p></li>
<li><p><code>Gwaiting</code>: 当一个任务需要的资源或运行条件不能被满足时，需要调用<code>runtime·park</code>函数进入该状态，之后除非等待条件满足，否则任务将一直处于等待状态不能执行。除了之前举过的channel的例子外，Go语言的定时器、网络IO操作都可能引起任务的阻塞。</p>

<p>  <code>runtime·park</code>函数包含3个参数，第一个是解锁函数指针，第二个是一个Lock指针，最后是一个字符串用以描述阻塞的原因。</p>

<p>  很明显，前两个参数是配对的结构——由于任务阻塞前可能获得了某些Lock，这些Lock必须在任务状态保存完成后才能释放，以避免数据竞争。我们知道channel必须通过Lock确保互斥访问，一个阻塞的任务<strong>G#1</strong>需要将自己放到channel的等待队列中，如果在完成上下文保存前就释放了Lock，则可能导致<strong>G#2</strong>将未知状态的<strong>G#1</strong>置为<code>Grunnable</code>，因此释放Lock必须在<code>runtime·park</code>内完成。</p>

<p>  由于阻塞时任务持有的Lock类型不尽相同——如Select操作的锁实际上是一组Lock的集合——因此需要特别指出Unlock的具体方式。</p>

<p>  最后一个参数主要是在gdb调试的时候方便发现任务阻塞的原因。</p>

<p>  顺便说一下，当所有的任务都处于<code>Gwaiting</code>状态时，也就表示当前程序进入了死锁态，不可能继续执行了，那么runtime会检测到这种情况，并输出所有<code>Gwaiting</code>任务的backtrace信息。</p></li>
<li><p><code>Gdead</code>: 最后，当一个任务执行结束后，会调用<code>runtime·goexit</code>结束自己的生命——将状态置为<code>Gdead</code>，并将结构体链到一个属于当前<code>P</code>的空闲<code>G</code>链表中，以备后续使用。</p>

<p>  Go语言的并发模型基本上遵照了<a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP模型</a>，goroutine间完全靠channel通信，没有像Unix进程的<code>wait</code>或<code>waitpid</code>的等待机制，也没有类似“POSIX Thread”中的<code>pthread_join</code>的汇合机制，更没有像<code>kill</code>或<code>signal</code>这类的中断机制。每个goroutine结束后就自行退出销毁，不留一丝痕迹。</p></li>
</ul>


<h2>深入任务切换 —— m->g0和runtime·mcall的妙用</h2>

<p>通过上面的分析，相信大家已经基本理清了goroutine执行的线索。
现在让我们再仔细观察一下状态切换的过程，首先，以<code>Grunning</code>状态为中心来看，把状态切换先粗略的分为两大类——</p>

<ol>
<li>由<code>Grunning</code>变为其他状态，即goroutine退出（“用户态”）执行；</li>
<li>由其他状态变为<code>Grunning</code>状态，即被调度执行</li>
</ol>


<p>第一类是由当前活跃的goroutine主动调用runtime相关函数完成的，是主动的；而第二类则是由runtime或其他goroutine完成的，是被动的。</p>

<p>对于第一类，其实还可以细分 —— 到<code>Gsyscall</code>的情况我们以后讨论，先来看其他几种情况，分别是：</p>

<ul>
<li>调用<code>runtime·sched</code>主动让出处理器，其实就对应于Go语言的<code>yield</code>关键字，状态切换到<code>Grunnable</code></li>
<li>调用<code>runtime.park</code>阻塞，状态切换到<code>Gwaiting</code></li>
<li>调用<code>runtime·goexit</code>结束，状态切换到<code>Gdead</code></li>
</ul>


<p>看一下这几个函数的实现，发现它们不过是一层封装，以<code>runtime·park</code>为例，最终会调用<code>runtime·mcall(park0)</code>完成真正的任务，代码如下：</p>

<p>``` c++
void
runtime·park(void(<em>unlockf)(Lock</em>), Lock *lock, int8 reason)
{</p>

<pre><code>m-&gt;waitlock = lock;
m-&gt;waitunlockf = unlockf;
g-&gt;waitreason = reason;
runtime·mcall(park0);
</code></pre>

<p>}
```</p>

<p>其他几个也类似，分别调用了<code>runtime·mcall(sched0)</code>和<code>runtime·mcall(goexit0)</code>。</p>

<p>先来看看这个<code>runtime·mcall</code>函数的功能。它具体定义在<code>src/pkg/runtime/asm_[arm|amd64|386].s</code>中，是用汇编语言实现的。以下是截取该文件中对<code>mcall</code>函数的注释：</p>

<p><code>c++
// void mcall(void (*fn)(G*))
// Switch to m-&gt;g0's stack, call fn(g).
// Fn must never return. It should gogo(&amp;g-&gt;sched) to keep running g.
</code></p>

<p>这段注释意思简明清楚 —— <code>runtime.mcall</code>函数接受一个以<code>G*</code>为参数的函数指针<code>fn</code>，执行时会先将当前任务<code>g</code>的上下文保存到<code>g-&gt;sched</code>结构中，然后切换到<code>m-&gt;g0</code>的栈空间，再调用<code>fn</code>，参数就是当前任务指针<code>g</code>。对<code>runtime.mcall</code>函数的调用是不会返回的，除非调用<code>gogo(&amp;g-&gt;sched)</code>。</p>

<p>也就是说，在执行<code>runtime.mcall(park0)</code>之后，会进入<code>park0(g)</code>继续执行。我们再看看<code>park0</code>的实现代码：</p>

<p>``` c++
static void
park0(G *gp)
{</p>

<pre><code>gp-&gt;status = Gwaitng;
gp-&gt;m = nil;
m-&gt;curg = nil;
if (m-&gt;waitunlockf) {
    m-&gt;waitunlockf(m-&gt;waitlock);
    m-&gt;waitunlockf = nil;
    m-&gt;waitlock = nil;
}
if (m-&gt;lockedg) {
    stoplckedm();
    execute(gp); // Never return
}
schedule();
</code></pre>

<p>}
```</p>

<p>这个函数的功能也很简单：</p>

<ol>
<li>将<code>gp</code>状态切换到<code>Gwaitng</code></li>
<li>将<code>gp</code>和<code>m</code>分离</li>
<li>释放在用户态时持有的锁（如果有的话）</li>
<li>最后，如果<code>m</code>与<code>gp</code>是强制绑定的，那么<code>m</code>线程会等待<code>gp</code>状态变为<code>Grunnable</code>后再将其调度执行；否则直接调用<code>schedule</code>重新选择可执行的任务</li>
</ol>


<p>其他几个函数实现也是类似的结构，只需将步骤3替换成对应的操作 —— 对于<code>sched0</code>就是将<code>gp</code>加到全局任务队列里；对于<code>goexit0</code>就是释放、回收<code>gp</code>的资源。</p>

<p>到这里，我们似乎搞清了前因后果，但好像还有什么地方有点模糊 —— 对了，所有这些<code>xxxx0</code>函数为什么都要先切换到<code>m-&gt;g0</code>的栈上执行呢？为什么不可以直接在当前<code>g</code>的栈上执行？那样不是省去了若干次上下文保存、恢复的麻烦吗？</p>

<p>要搞清这个问题，先要看看<code>m-&gt;g0</code>这个结构。我们之前说过，Go中的<code>M</code>对应OS线程，每个<code>M</code>分配时会首先创建一个<code>g0</code>任务，并分配大约8KB大小的栈空间。在线程创建时刻 —— 比如在Linux中，通过<code>clone</code>系统调用 —— 会将<code>g0</code>的栈绑定给对应的OS线程。</p>

<p>前面讲了，每个用户goroutine创建后，都会分配独立的栈（初始大小稍小一些，因为Go的栈是动态可扩展的），执行用户任务就会切换到用户任务的栈上。这样，<code>g0</code>的栈空间实际上就是独立于任何用户任务的，因此可以执行一些不适合在用户栈上执行的程序。这个有点类似OS中用户栈和内核栈的关系。</p>

<p>以<code>sched0</code>为例说明为什么执行goroutine的切换不能在当前<code>g</code>的栈上完成。</p>

<p>假设我们这么做，那么首先要保存<code>g</code>的上下文状态到<code>g-&gt;sched</code>结构体中，然后从任务队列中选择另一个状态为<code>Grunnable</code>的任务<code>g1</code>，在将上下文切换到<code>g1</code>之前，我们需要先将<code>g</code>放回任务队列中，以便它未来还能被调度执行，然后<strong>M#1</strong>切换到<code>g1</code> —— 注意，问题来了！由于Go的runtime是多线程的，因此可能同时存在多个执行线程，一旦<code>g</code>进入队列，那么它完全可能被另一个线程<strong>M#2</strong>调度执行。这时，<strong>M#1</strong>和<strong>M#2</strong>实际上都运行在<code>g</code>的栈上（<strong>goroutine切换不是“原子操作”!</strong>），就可能出现数据竞争从而导致错误！</p>

<p>而利用<code>m-&gt;g0</code>的栈进行<code>sched0</code>这样的操作，由于不同的线程有各自独立的<code>g0</code>及栈空间，因而不会发生数据竞争问题。</p>

<h3>runtime·mcall 的另一个用途</h3>

<p>除了进行goroutine切换外，<code>runtime·mcall</code>还有一个功能，就是可以委托处理栈空间分配。具体来说，当一个任务通过<code>go</code>关键字新建任务时 —— 我们知道该操作最终会映射到<code>runtime·newproc1</code>函数 —— 那么就会涉及调用<code>runtime·mstackalloc</code>对新建任务分配栈空间的操作。</p>

<p>Go 1.2 的用户任务采用了“分段式栈”的实现方案，其栈空间是根据需要动态扩展的，每个函数调用点都会判断当前栈空间是否满足需要，如果不够就要追加分配。要确保调用<code>runtime·mstackalloc</code>时不会再出现栈分配的情形，就不能直接在用户空间上运行该函数。现在，我们很容易想到的就是利用<code>runtime·mcall</code>切换到<code>g0</code>上执行栈分配！因为<code>g0</code>的初始栈空间比较大，可以认为能够满足调用需要。</p>

<p>与之前<code>xxxx0</code>函数情况略有不同，在分配完栈空间后，我们希望马上切换会刚才的<code>g</code>，而不是触发新的调度，因此，必须直接调用<code>runtime·gogo(&amp;g-&gt;sched)</code>返回——这点在<code>runtime·mcall</code>的注释中也说得很明白。</p>

<h2>待续&hellip;</h2>

<p>今天初步把Go语言任务状态变化串讲了一下，更重要的是把<code>m-&gt;g0</code>和<code>runtime·mcall</code>这两个结构分析了一下。本来还想继续介绍一下有关<code>Gsyscall</code>状态的一些细节，不过看看时间已经接近凌晨2点了，再不休息估计明天上班会很辛苦。所以就把这个话题，连同之前讲channel时没有深入分析的“定时器”机制一起放在后面完成。</p>

<hr />

<p><em>限于个人水平，本文内容不免谬误之处，欢迎大家致信我的邮箱amalcaowei@gmail.com或在讨论版留言！</em></p>
]]></content>
  </entry>
  
</feed>
