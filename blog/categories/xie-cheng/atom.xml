<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 协程 | AmaL'sbLoG]]></title>
  <link href="http://blog.amalcao.me/blog/categories/xie-cheng/atom.xml" rel="self"/>
  <link href="http://blog.amalcao.me/"/>
  <updated>2016-03-15T22:10:58+08:00</updated>
  <id>http://blog.amalcao.me/</id>
  <author>
    <name><![CDATA[Amal Cao]]></name>
    <email><![CDATA[amalcaowei@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoroC 语言开源了]]></title>
    <link href="http://blog.amalcao.me/blog/2016/03/11/coroc-yu-yan-kai-yuan/"/>
    <updated>2016-03-11T15:46:47+08:00</updated>
    <id>http://blog.amalcao.me/blog/2016/03/11/coroc-yu-yan-kai-yuan</id>
    <content type="html"><![CDATA[<h2>CoroC 是什么？</h2>

<p>CoroC 是 &ldquo;Coroutine-C&rdquo; 的简称，顾名思义，就是在 C 语言的基础上，增加了对 “协程” 的原生支持，从而简化了在纯 C 下开发轻量并发系统的难度。</p>

<h2>CoroC 实现了哪些功能？</h2>

<p>在设计上，CoroC 借鉴了大量 Go 语言的元素，包括 <code>channel</code>，<code>select</code>, <code>netpolling</code> 等，当然，为了很好的实现并发，我们也在 C 中加入了并发的 “智能指针” 。
同时增加了一些新的探索性功能，比如 “Actor 模型”、“Fork-Join 模型”、“优先级调度”、“分时抢占” 等，当然其中一些还处于实验阶段。</p>

<p>在实现上，CoroC 分成两个主要部分，运行时库编和译器前端。</p>

<ul>
<li>运行时库是一个用纯 C 编写的静态库，可以直接用在 C 语言项目中</li>
<li>编译器前端是一个基于 clang-3.5 开发的 “源-源变换” 工具，通过它可以将一个包含扩展语法的 CoroC 程序转化为一个含 C 库调用的纯 C 程序</li>
</ul>


<h2>如何获取 CoroC 代码和文档？</h2>

<p>目前，我已将 CoroC 运行时和编译器的代码分别发布在 <a href="bitbucket.org">bitbucket.org</a> 上，</p>

<ul>
<li>其中运行时位于 <a href="https://bitbucket.org/amalcao/libtsc">https://bitbucket.org/amalcao/libtsc</a>，内含运行时代码及相应的 C 及 CoroC 的代码实例，同时包含了 《CoroC 语言规范》和 《CoroC 编译环境构建指南》两个中文文档</li>
<li>编译器的代码位于 <a href="https://bitbucket.org/amalcao/clang-coroc">https://bitbucket.org/amalcao/clang-coroc</a></li>
</ul>


<h2>编写 CoroC 的目的</h2>

<p>编写 CoroC 的动机，一方面是想通过实际开发，理解 Go 语言并发设计的原理，另一方面是学习基于 clang / llvm 的二次开发方法。</p>

<h2>联系我们</h2>

<p>当然，目前的 CoroC 还处在一个玩具级别的状态，其中不免会有很多错误，希望大家多多指教！</p>

<p>如果您对于 CoroC 有什么建议，可以直接在 bitbucket 上给我发 pull request，当然也可以发邮件到我的邮箱 <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x61;&#x6d;&#x61;&#108;&#x63;&#x61;&#x6f;&#119;&#x65;&#105;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;&#x2e;">&#97;&#109;&#97;&#108;&#x63;&#97;&#x6f;&#119;&#x65;&#105;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;&#46;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建C协程之ucontext篇]]></title>
    <link href="http://blog.amalcao.me/blog/2014/07/10/cxie-cheng-zhi-ucontextpian-shang/"/>
    <updated>2014-07-10T16:57:50+08:00</updated>
    <id>http://blog.amalcao.me/blog/2014/07/10/cxie-cheng-zhi-ucontextpian-shang</id>
    <content type="html"><![CDATA[<h1>原理简介</h1>

<p>所谓 “ucontext” 机制是 GNU C 库提供的一组用于创建、保存、切换用户态执行“上下文”（context）的API，可以看作是 “setjmp/long_jmp” 的“升级版”，主要包括以下四个函数：</p>

<p><code>c++
void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);
int swapcontext(ucontext_t *oucp, ucontext_t *ucp);
int getcontext(ucontext_t *ucp);
int setcontext(const ucontext_t *ucp);
</code>
结构体 <code>ucontext_t</code> 和上述4个函数声明一起定义在系统头文件<code>&lt;ucontext.h&gt;</code> 中，该类型的具体实现与体系结构相关，但规范要求其至少要包含以下字段：</p>

<p>``` c++
typedef struct ucontext {</p>

<pre><code>struct ucontext *uc_link;
sigset_t        uc_sigmask;
stack_t      uc_stack;
mcontext_t  uc_mcontext;
...
</code></pre>

<p>} ucontext_t;
```</p>

<p>其中 <code>sigset_t</code> 和 <code>stack_t</code> 定义在标准头文件 <code>&lt;signal.h&gt;</code> 中，
<code>uc_link</code> 字段保存当前context结束后继续执行的context记录，
<code>uc_sigmask</code> 记录该context运行阶段需要屏蔽的信号，
<code>uc_stack</code> 是该context运行的栈信息，
最后一个字段<code>uc_mcontext</code> 则保存具体的程序执行上下文——如PC值、堆栈指针、寄存器值等信息——其实现方式依赖于底层运行的系统架构，是平台、硬件相关的。</p>

<p>下面具体来看每个函数的功能：</p>

<ul>
<li><p><code>int makecontext(ucontext_t *ucp, void (*func)(), int argc, ...)</code>
  该函数用以初始化一个<strong>ucontext_t</strong>类型的结构，也就是我们所说的用户执行上下文。函数指针func指明了该context的入口函数，argc指明入口参数个数，该值是可变的，但每个参数类型都是int型，这些参数紧随argc传入。
另外，在调用makecontext之前，一般还需要显式的指明其初始栈信息（栈指针SP及栈大小）和运行时的信号屏蔽掩码（signal mask）。
同时也可以指定uc_link字段，这样在func函数返回后，就会切换到uc_link指向的context继续执行。</p></li>
<li><p><code>int setcontext(const ucontext_t *ucp)</code>
  该函数用来将当前程序执行线索切换到参数<code>ucp</code>所指向的上下文状态，在执行正确的情况下，该函数直接切入到新的执行状态，不再会返回。比如我们用上面介绍的makecontext初始化了一个新的上下文，并将入口指向某函数<code>entry()</code>，那么setcontext成功后就会马上运行<code>entry()</code>函数。</p></li>
<li><p><code>int getcontext(ucontext_t *ucp)</code>
  该函数用来将当前执行状态上下文保存到一个<strong>ucontext_t</strong>结构中，若后续调用setcontext或swapcontext恢复该状态，则程序会沿着getcontext调用点之后继续执行，<strong>看起来好像刚从getcontext函数返回一样。</strong> 这个操作的功能和setjmp所起的作用类似，都是保存执行状态以便后续恢复执行，但需要重点指出的是：<strong>getcontext函数的返回值仅能表示本次操作是否执行正确，而不能用来区分是直接从getcontext操作返回，还是由于setcontext/swapcontex恢复状态导致的返回，这点与setjmp是不一样的。</strong></p></li>
<li><p><code>int swapcontext(ucontext_t *oucp, ucontext_t *ucp)</code>
  理论上，有了上面的3个函数，就可以满足需要了（<em>后面讲的libgo就只用了这3个函数，而实际只需setcontext/getcontext就足矣了</em>），但由于getcontext不能区分返回状态，因此编写上下文切换的代码时就需要保存额外的信息来进行判断，显得比较麻烦。
为了简化切换操作的实现，ucontext 机制里提供了swapcontext这个函数，用来“原子”地完成旧状态的保存和切换到新状态的工作（当然，这并非真正的原子操作，在多线程情况下也会引入一些调度方面的问题，后面会详细介绍）。
为了进一步理解swapcontext这个函数的设计目的，可以尝试利用getcontext/setcontext完成同样的功能，你需要怎样编写代码？
同时，也不妨思考一下下面这段代码的执行结果（该例出自维基百科<a href="http://en.wikipedia.org/wiki/Setcontext">Setcontext 条目</a>）：</p></li>
</ul>


<p>``` c++</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;ucontext.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>ucontext_t context;

getcontext(&amp;context);
puts("Hello world");
sleep(1);
setcontext(&amp;context);
return 0;
</code></pre>

<p>}
```</p>

<h1>小结</h1>

<p>可以看出，用ucontext机制实现一个“协程”系统并不困难。
实际上，每个运行上下文（ucontext_t）就直接对应于“协程”概念，对于协程的“创建”（Create）、“启动” （Spawn）、“挂起” （Suspend）、“切换” （Swap）等操作，很容易通过上面的4个API及其组合加以实现，需要的工作仅在于设计一组数据结构保存暂不运行的context结构，提供一些调度的策略即可。
这方面的开源实现有很多，其中最著名的就是Go的前身，libtask库。</p>

<p>对于将“协程”映射到多OS线程执行的情形，就要稍稍复杂一些，但主要的问题是集中在共享任务队列的实现、调度线程间的互斥等，至于“协程”的映射问题，与单线程情况没有太大的区别。
对于这方面的开源借鉴，当然首推Go的运行时 —— 但由于标准Go实现没有使用GNU C库，而是自行设计了包括C编译器在内的整套工具链，因而就没有直接采用ucontext机制（尽管其内部实现机制与ucontext原理类似）。</p>

<p>以后有机会，会再分析一下GCC Go语言前端的运行时实现——libgo。
libgo的调度器部分基本用C开发并由GCC编译，“goroutine”（Go语言中相对于“协程”的概念）也直接以“ucontext”机制实现，其代码对于分析C语言下“协程”系统实现方法而言，具有较高的参考价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建C协程之setjmp/long_jmp篇]]></title>
    <link href="http://blog.amalcao.me/blog/2014/07/10/cxie-cheng-zhi-setjmp-slash-long-jmp/"/>
    <updated>2014-07-10T16:15:20+08:00</updated>
    <id>http://blog.amalcao.me/blog/2014/07/10/cxie-cheng-zhi-setjmp-slash-long-jmp</id>
    <content type="html"><![CDATA[<h1>原理简介</h1>

<p>在标准C中的头文件<code>&lt;setjmp.h&gt;</code>中定义了一组函数 setjmp / long_jmp 用来实现“非本地跳转”的功能，利用 setjmp 可以保存当前执行线索状态，稍后通过 long_jmp 函数可以实现状态的恢复，并且可以跨多层函数调用栈进行跳转。具体接口定义如下：</p>

<ul>
<li><p><code>int setjmp(jmp_buf env)</code>
  该函数主要用来保存当前执行状态，作为后续跳转的目标。调用时，当前状态会被存放在<code>env</code>指向的结构中，<code>env</code>将被 long_jmp 操作作为参数，以返回调用点 &mdash; 跳转的结果看起来就好像刚从setjmp返回一样。
<strong>直接调用setjmp保存状态后，返回值是0；而从long_jmp操作返回时，返回值是非0的 &mdash; 通过判断setjmp的返回值，就可以判断当前执行状态。</strong></p></li>
<li><p><code>void long_jmp(jmp_buf env, int value)</code>
  该函数用来恢复<code>env</code>中保存的执行状态，另一参数<code>value</code>用来传递返回值给跳转目标 &mdash; 如果<code>value</code>值为0，则跳转后返回setjmp处的值为1；否则，返回setjmp处的值为<code>value</code>。</p></li>
</ul>


<p>setjmp / long_jmp 这一机制的设计初衷是为了方便程序从较深的调用栈中直接返回到之前调用点 &mdash; 这非常有利于实现高效的错误处理机制，比如 C++ 中的异常机制就是如此。假设我们有这样一条调用路径：</p>

<p><code>fun0() -&gt; fun1() -&gt; fun2() -&gt; ... -&gt; funN()</code></p>

<p>假设在 funN 函数中发生了一个错误，需要返回 fun0 函数对错误进行处理，按照惯常的方法需要层层返回错误，效率较低。利用 setjmp / long_jmp 机制，就可以在 fun0 函数调用 fun1 前用 setjmp 保存一个状态，然后一旦调用路径中的某个环节出现错误，就使用 long_jmp 跳回 fun0 函数，通过 setjmp 的返回值就可以判断错误类型并做后续处理，非常简便，与 C++ / Java 等语言中的 <code>try {...} catch (...) {...}</code> 结构很类似。</p>

<p>这里需要注意的是，long_jmp 返回后的执行依赖于之前 setjmp 执行时的栈环境，在上面的例子中，由于 funN 执行跳转时，fun0 的执行栈没有释放，因此返回后继续执行没有任何问题。
<strong>但假如在 fun0 返回后（更精确的说是执行 setjmp 的作用域退出后），再通过 long_jmp 跳转回 fun0， 由于原先栈帧（stack frame）已被释放，其对应内存空间可能别做他用，因而这时程序的执行就进入了不可知状态，很可能因起错误，这点需要特别注意！</strong></p>

<p>setjmp 会将状态信息保存到一个平台相关的结构 jmp_buf 中，这个结构对于程序员来说一般是透明的，也就是说我们并不知道 jmp_buf 的具体字段及其含义，也就不能做诸如栈空间切换的操作 &mdash; 这对于实现"协程"系统来说，就比较麻烦了。因为"协程"间并发执行的性质要求系统对不同"协程"的栈空间进行隔离。</p>

<p>尽管如此，我还是在网上找到了很多利用 setjmp / long_jmp 实现的"协程"系统，现挑其中几个比较有代表性的例子介绍一下。</p>

<h1>案例一： setjmp-longjmp-ucontext-snippets</h1>

<p>这是一个小型的 &ldquo;N:1&rdquo; 的协程系统，代码托管在<a href="https://github.com/danluu/setjmp-longjmp-ucontext-snippets">github</a>。利用 setjmp / long_jmp 实现协程，同时还提供了一个简单的 <a href="http://en.wikipedia.org/wiki/Channel_programming">Channel</a> 实现，以供协程间通信。</p>

<h2>实现分析</h2>

<p>我们把精力主要放在协程的实现方式上，看看它如何解决“栈切换”的问题。</p>

<p>该库提供了以下几个协程操作的API：</p>

<ul>
<li><p><code>void coro_allocate (int num_cores)</code>
  在程序开始时调用，静态预分配 num_cores 个协程空间，程序中最大运行的协程数不能超过 num_cores 个。</p></li>
<li><p><code>int coro_spawn(coro_callback f, void *user_state)</code>
  启动一个协程，入口函数由第一个参数 f 指定， user_state 是 f 的参数。</p></li>
<li><p><code>int coro_runnable(int pid)</code>
  将编号为 pid 的协程设为可执行态。</p></li>
<li><p><code>void coro_yield(int pid)</code>
  让出处理器，并切换到以 pid 为编号的其他协程继续执行。</p></li>
</ul>


<p>下面来具体看看其中的奥秘，我们将重点集中在 coro_allocate 这个函数，它为每个协程分配一个 jmp_buf 结构和一个指示该协程状态的int型数据。其中0号协程对应于“调度器”或者说“运行时环境”。
最后调用 <code>grow_stack(0, num_cores)</code> 完成后续工作，应该说所有的玄机都藏在<strong>grow_stack</strong>这个函数中，我们看一下它的代码：</p>

<p>``` c++
// have never exit so we get a pristine stack for our coroutines
static void grow_stack(int n, int num_coros) {
  if (n == num_coros + 1) {</p>

<pre><code>longjmp(bufs[0],1);
assert(0);
return;
</code></pre>

<p>  }</p>

<p>  if (!setjmp(bufs[n])) {</p>

<pre><code>char *big_array;
big_array = alloca(STACK_SIZE);
asm volatile("" :: "m" (big_array));

grow_stack(n + 1, num_coros);
</code></pre>

<p>  } else {</p>

<pre><code>if (n == 0) {
  return; //came from coro_allocate; return back there
} 
while(1) {
  assert(spawned_fun);
  coro_callback f = spawned_fun;
  spawned_fun = NULL;

  assert(n == coro_pid);
  f(spawned_user_state);
  used_pids[n] = 0;
  coro_yield(0);
}
</code></pre>

<p>  }
}
```</p>

<p>这是一个递归函数，深度是 num_cores + 1。调用顺序从 0 到 num_cores, 每一层调用都利用 setjmp 将状态保存到相应编号的 jmp_buf 结构中，然后通过alloca在当前栈帧上分配一个较大的空间，作为该编号协程的运行栈。当参数n超过num_coros时，程序逐层返回到调用者。</p>

<p>之后调用 coro_spawn 启动一个协程时，先将参数 f 和 user_state 分别保存到全局变量 spawned_fun 和 spawned_user_state 中，然后找到一个空闲的协程编号，恢复该编号在 grow_stack 时保存的状态 —— 也就是说回到了 grow_stack 的 else 分支，调用全局的函数指针 spawned_fun 指向的入口函数 （<em>由于系统是运行在单线程环境的，因此使用全局变量不会出现问题，但笔者个人认为为每个协程设计一个结构体来保存这些信息更好一些</em>）。</p>

<p>刚才介绍时我们特别强调了跳转到已经释放的“栈帧”可能引发错误，但这里却偏偏这样做，道理是什么呢？
问题的关键就在于grow_stack时用alloca预留栈空间的操作，这个操作本质上将原来主程序的栈空间划分成N份，然后假设每个协程运行时使用的栈都不会超过为它们预留的那段空间。而编号为0 的协程恰好对应于运行时环境，因此运行时环境的栈就位于最低端，如果后面的操作使用的栈空间不“越界”，那就不会影响1号协程的执行；其他协程之间也是同理。</p>

<h2>小结</h2>

<p>案例一利用了程序栈帧顺序增长的特点，实现非常巧妙。<strong>但缺点在于不但需要提前指定系统支持的最大协程数，而且所有协程的栈都必须在原始程序栈空间的基础上分配，栈的大小及支持的最大协程数量（也就是可划分的最大栈数量）都因此受到了限制。</strong></p>

<h1>案例二：libconcurrency</h1>

<p>这个项目托管在<a href="https://code.google.com/p/libconcurrency/">google code</a>，也是采用 setjmp / long_jmp 实现的轻量协程系统，但与案例一的不同之处在于，libconcurrency 使用了“栈拷贝”技术 &mdash; 每个协程的运行栈是通过malloc在堆空间动态分配的，然后再将原始的栈帧数据复制到新的栈上。正因如此，其系统的可扩展性比较好，协程可以动态创建，且理论上没有上限。</p>

<h2>实现分析</h2>

<p>还是照例先来分析一下协程操作的API，我们最关心以下几个：</p>

<ul>
<li><p><code>coro coro_init()</code>
  用来在系统启动时对协程环境进行初始化，这里隐藏着系统最关键的部分，稍后详细分析。</p></li>
<li><p><code>coro coro_new(_entry fn)</code>
  新分配一个协程并指定其入口函数 fn，这个函数非常重要，我们将首先分析。</p></li>
<li><p><code>cvalue coro_call(coro target, cvalue value)</code>
  启动协程 target，并传入指定参数 value，同时返回协程执行后的结果。</p></li>
</ul>


<p>先分析 coro_new 的实现。
该函数本身不难理解：先用malloc分配 struct _coro 对象 <code>c</code> 及其栈空间，然后初始化该对象，指定入口函数、栈指针和栈大小，最后调用 <code>_coro_enter (c)</code> 完成后续操作 —— _coro_enter函数才是我们重点分析的对象，其代码如下：</p>

<p>``` c++
/<em>
 * This function invokes the start function of the coroutine when the
 * coroutine is first called. If it was called from coro_new, then it sets
 * up the stack and initializes the saved context.
 </em>/
void _coro_enter(coro c)
{</p>

<pre><code>if (_save_and_resumed(c-&gt;ctxt))
{   /* start the coroutine; stack is empty at this point. */
    cvalue _return;
    _return.p = _cur;
    _cur-&gt;start(_value);
    /* return the exited coroutine to the exit handler */
    coro_call(&amp;_on_exit, _return);
}
/* this code executes when _coro_enter is called from coro_new */
</code></pre>

<p>INIT_CTXT:</p>

<pre><code>{
    /* local and new stack pointers at identical relative positions on the stack */
    intptr_t local_sp = (intptr_t)&amp;local_sp;
    /* I don't know what the addition "- sizeof(void *)" is for when
       the stack grows downards */
    intptr_t new_sp = c-&gt;stack_base +
        (_stack_grows_up
            ? _frame_offset
            : c-&gt;stack_size - _frame_offset - sizeof(void *));

    /* copy local stack frame to the new stack */
    _coro_cpframe(local_sp, new_sp);

    /* reset any locals in the saved state to point to the new stack */
    _coro_rebase(c, local_sp, new_sp);
}
</code></pre>

<p>}
```</p>

<p><em>说明一下，代码中的_save_and_resume是一个宏，直接对应于 setjmp。</em></p>

<p>不难理解，其中的 if 分支是后续经由 long_jmp 恢复后的执行路径，该分支就是调用之前指定的入口函数，调用结束后马上切换回主协程处理返回值。</p>

<p>我们重点来看 <strong>INIT_CTXT</strong> 标号后的语句块，这部分用来做协程执行状态的初始化，比较难理解，该过程大体分3步：</p>

<ol>
<li><p>利用栈变量 local_sp 的地址值来确定当前栈帧的位置，然后通过之前 malloc 的指针及大小确定 new_sp 的值，计算时需要注意不同的体系结构下，栈的生长方向可能不同，需要区别对待。</p></li>
<li><p>调用 _coro_cpframe 函数将当前栈帧内容复制到新的栈空间上，它本质上就是一个 memcpy，不过和前面一样，需要注意栈的方向。另外，当前栈使用大小，也就是需要复制的栈长度由全局变量 _frame_offset 指定，该变量在 coro_init 时确定，后面再介绍。</p></li>
<li><p>最后，根据新旧SP值，调用 _coro_rebase 函数对之前保存在 jmp_buf 中的状态信息进行修正，使得下次跳回时能落到新的栈帧上执行。
深入到 _coro_rebase 实现中，会发现这个函数首先计算新旧SP的差值，然后将这个差值加回到 jmp_buf （被看作是一个intptr_t类型的数组）的部分元素上，视为修正——具体哪个位置的值需要被修正保存在全局的数组 _offset[] 中，它的值同样是在 coro_init 函数执行阶段被确定的。</p></li>
</ol>


<p><strong>先来解释一下这种“线性修正”之所以可行的原因：</strong></p>

<p>一般情况下，我们可以认为 jmp_buf 是一个数组，数组元素的位宽与具体硬件平台相关，比如IA32下是32bit （int），X64下是64bit （long long）。
其中保存的主要信息就是运行 setjmp 点的 PC、SP（栈指针）以及BP（栈底位置）等。
这些信息大致上可以分成两部分：一类与当前的运行栈地址相关，比如SP、BP；另一类与之无关，比如PC。
基于C语言栈“线性生长”的特点，通过弥补新旧栈地址的线性差值，就可以达到切换栈的效果。</p>

<p>然而，具体实现中 jmp_buf 的每个元素位置对应什么信息则是平台相关的，作为一个以可移植性为目的的系统不应该对其实现做任何假设，因此只能在程序启动阶段以某种方式动态计算获取。</p>

<p>这个计算的过程就隐藏在 coro_init 中，具体通过 _probe_arch 函数实现，相关代码如下：</p>

<p>``` c++
/<em> This probing code is derived from Douglas Jones' user thread library </em>/
struct _probe_data {</p>

<pre><code>intptr_t low_bound;     /* below probe on stack */
intptr_t probe_local;   /* local to probe on stack */
intptr_t high_bound;    /* above probe on stack */
intptr_t prior_local;   /* value of probe_local from earlier call */

jmp_buf probe_env;  /* saved environment of probe */
jmp_buf probe_sameAR;   /* second environment saved by same call */
jmp_buf probe_samePC;   /* environment saved on previous call */

jmp_buf * ref_probe;    /* switches between probes */
</code></pre>

<p>};</p>

<p>void boundhigh(struct _probe_data *p)
{</p>

<pre><code>int c;
p-&gt;high_bound = (intptr_t)&amp;c;
</code></pre>

<p>}</p>

<p>void probe(struct _probe_data *p)
{</p>

<pre><code>int c;
p-&gt;prior_local = p-&gt;probe_local;
p-&gt;probe_local = (intptr_t)&amp;c;
</code></pre>

<p>__LABEL_0:</p>

<pre><code>_setjmp( *(p-&gt;ref_probe) );
p-&gt;ref_probe = &amp;p-&gt;probe_env;
</code></pre>

<p>__LABEL_1:</p>

<pre><code>_setjmp( p-&gt;probe_sameAR );
boundhigh(p);
</code></pre>

<p>}</p>

<p>void boundlow(struct _probe_data *p)
{</p>

<pre><code>int c;
p-&gt;low_bound = (intptr_t)&amp;c;
probe(p);
</code></pre>

<p>}</p>

<p>void fill(struct _probe_data *p)
{</p>

<pre><code>boundlow(p);
</code></pre>

<p>}</p>

<p>static void <em>infer_jmpbuf_offsets(struct </em>probe_data *pb)
{</p>

<pre><code>/* following line views jump buffer as array of long intptr_t */
unsigned i;
intptr_t * p = (intptr_t *)pb-&gt;probe_env;
intptr_t * sameAR = (intptr_t *)pb-&gt;probe_sameAR;
intptr_t * samePC = (intptr_t *)pb-&gt;probe_samePC;
intptr_t prior_diff = pb-&gt;probe_local - pb-&gt;prior_local;
intptr_t min_frame = pb-&gt;probe_local;

for (i = 0; i &lt; sizeof(jmp_buf) / sizeof(intptr_t); ++i) {
    intptr_t pi = p[i], samePCi = samePC[i];
    if (pi != samePCi) {
        if (pi != sameAR[i]) {
            perror("No Thread Launch\n" );
            exit(-1);
        }
        if ((pi - samePCi) == prior_diff) {
            /* the i'th pointer field in jmp_buf needs to be save/restored */
            _offsets[_offsets_len++] = i;
            if ((_stack_grows_up &amp;&amp; min_frame &gt; pi) || (!_stack_grows_up &amp;&amp; min_frame &lt; pi)) {
                min_frame = pi;
            }
        }
    }
}

_frame_offset = (_stack_grows_up
    ? pb-&gt;probe_local - min_frame
    : min_frame - pb-&gt;probe_local);
</code></pre>

<p>}</p>

<p>static void _infer_direction_from(int *first_addr)
{</p>

<pre><code>int second;
_stack_grows_up = (first_addr &lt; &amp;second);
</code></pre>

<p>}</p>

<p>static void _infer_stack_direction()
{</p>

<pre><code>int first;
_infer_direction_from(&amp;first);
</code></pre>

<p>}</p>

<p>static void _probe_arch()
{</p>

<pre><code>struct _probe_data p;
p.ref_probe = &amp;p.probe_samePC;

_infer_stack_direction();

/* do a probe with filler on stack */
fill(&amp;p);
/* do a probe without filler */
boundlow(&amp;p);
_infer_jmpbuf_offsets(&amp;p);
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li><p>首先需要分析栈的生长方向，这个实现很简单，只要比较调用者和被调用者栈变量的地址大小就可以了；</p></li>
<li><p>下一步通过调用<code>fill(&amp;p) -&gt; boundlow(p) -&gt; probe(p)</code>，将<strong>__LABLE_0</strong>的状态记录到 _probe_data 的 <strong>probe_samePC</strong>字段，而将<strong>__LABEL_1</strong>的状态记录到<strong>probe_sameAR</strong>字段；<strong>probe_local</strong>字段则记录执行 probe 函数时的栈顶 —— SP值。</p></li>
<li><p>然后，通过调用<code>boundlow(&amp;p) -&gt; probe(p)</code>，将<strong>__LABLE_0</strong>的状态记录到 _probe_data 的<strong>probe_env</strong>字段，而<strong>__LABEL_1</strong>的状态仍旧记录到<strong>probe_sameAR</strong>字段；将上一次记录的执行 probe 函数时记录的SP值保存到<strong>prior_local</strong>字段，同时更新<strong>probe_local</strong>字段记录本次执行probe函数的SP值。</p></li>
<li><p>最后，调用 _infer_jmpbuf_offsets 函数进行最终计算。
这时，<strong>probe_samePC</strong>保存了第一次<strong>__LABEL_0</strong>处的状态，<strong>probe_env</strong>保存了第二次<strong>__LABEL_0</strong>处的状态，二者的PC属性相同，栈属性存在线性偏差（由于前次多了一层调用）；而 <strong>probe_env</strong>与<strong>probe_sameAR</strong>的栈属性相同，PC属性不同（调用setjmp的位置不同）。
通过这三组 jmp_buf 数据的关系，以及之前记录的两次调用过程的SP值之间的偏差，就能求得 jmp_buf 各项的属性是栈相关的还是栈无关的，将所有栈相关量在 jmp_buf 中的索引位置记录在 _offset 数组中即可。</p></li>
<li><p>同时，在遍历 jmp_buf 量的时候，还要找到其中与SP相差最大的值记录到 min_frame 变量中，这可能就是BP的值，用SP和BP相减，就得到了当前调用栈帧的大小，这个值最终被保存在全局变量 _frame_offset中，作为后来进行“栈拷贝”时的重要参数。</p></li>
</ul>


<p><img class="center" src="/images/2014/sjlj01.jpeg"></p>

<h2>小结</h2>

<p>本例利用了 setjmp 操作的底层实现原理，特别是 jmp_buf 结构的实现方式，设计了一个“可移植”的方案。
这个方案虽然可行，但是仍在一定程度上对 setjmp / long_jmp 的实现做了一些假设。
项目开发者并没有给出业已经过测试、可正确运行的平台；
笔者也没有在X86之外的系统上做过实验，因此对这种实现的普适性无法给出保证。
但总的来说，案例二的实现的技巧还是颇值得玩味的。</p>

<p>同样，libconcurrency库也仅支持 &ldquo;N:1&rdquo; 的映射方式，底层实现中没有用到多线程 —— 尽管从代码实现来看，似乎作者希望提供某种“线程安全”支持，但究竟是否如此，作者也没有提供任何用例及说明。</p>

<h1>案例三：Cilkplus 协程实现</h1>

<p>综合上面两个案例，我们不难发现，利用 setjmp / long_jmp 机制实现协程系统虽然在理论上具有可移植性好、性能好的优点，但用于实践中，由于 setjmp / long_jmp 实现的不透明性，导致很难构建出一个符合产品级需求的协程框架 &mdash; 即使上面介绍的那些具有一定想象力的实现，也几乎难以直接应用于实际产品。</p>

<p>产生上述问题的原因，主要在于不同体系结构的实现存在很大差异。
那么能否退而求其次，放弃“可移植性”这个优势，集中于几种常见的架构，专注于性能方面的提高呢？
答案是肯定的 &mdash; 接下来介绍的 Cilkplus 语言 Runtime 库，就是 Intel 基于自家 X86 / X86_64 平台的特点，实现的一个高效的“协程”框架。</p>

<h2>定制的 setjmp / long_jmp</h2>

<p>Cilkplus 运行时环境所使用的 setjmp / long_jmp 并非 C 库中提供的版本，而是编译器内嵌版本_builtin_setjmp / _builtin_longjmp，对应的 jmp_buf 结构对于开发者 —— 至少是系统开发者是可见的 —— 它本身是一个 void* 型数组，其中存放着运行状态的PC、SP及BP值，而且明确知道每个值在数组中的位置 —— 这样就可以在 setjmp 后，直接对保存的状态值进行“修正”。</p>

<h2>实现"协程"栈切换的原理</h2>

<p>前面介绍了为每个“协程”分配独立运行栈对于一个“协程”运行时系统的重要性，也了解了 setjmp / long_jmp 机制下实现栈分配，特别是高可用性的栈分配机制存在一定困难。现在来看看 Cilkplus 如何解决这个问题。</p>

<p>由于 Cilkplus 仅针对 Intel X86 / X64 平台，因此在介绍其“协程”栈切换原理之前，有必要先回顾一下 X86 / X64 平台的调用栈规则。以32位的 X86 为例介绍：</p>

<ul>
<li>调用者规则：
  调用者（Caller）首先需要将参数按照从右到左的顺序依次压栈，然后调用相应的函数，返回后再将参数栈释放。如下代码所示：</li>
</ul>


<p>```</p>

<pre><code>push [var] ; Push last parameter first
push 216   ; Push the second parameter
push eax   ; Push first parameter last

call _myFunc ; Call the function (assume C naming)

add esp, 12
</code></pre>

<p>```</p>

<ul>
<li>被调用者规则：
  被调用者（Callee）首先将当前BP（也就是Caller的BP）压栈，然后将当前SP（Caller的SP） 赋值给BP。之后如果遇到分配新的栈变量、创建调用参数或者用 alloca 动态分配空间时，则将 SP 减去新分配空间大小，并用“BP +/&ndash; 偏移量”的方式访问这些局部变量。<strong>访问当前栈帧的局部变量只需要BP即可，这点非常重要！</strong></li>
</ul>


<p><code>
   push ebp
   mov  ebp, esp
</code></p>

<ul>
<li>栈帧结构图如下所示：</li>
</ul>


<p><img class="center" src="/images/2014/stack-convention.png"></p>

<p>了解了这些基本知识后，就可以分析 Cilkplus 的代码了，其中最关键的部分如下所示：</p>

<p>``` c++</p>

<p>NORETURN cilk_fiber_sysdep::run()
{</p>

<pre><code>// Only fibers created from a pool have a proc method to run and execute. 
CILK_ASSERT(m_start_proc);
CILK_ASSERT(!this-&gt;is_allocated_from_thread());
CILK_ASSERT(!this-&gt;is_resumable());

// TBD: This setjmp/longjmp pair simply changes the stack pointer.
// We could probably replace this code with some assembly.
if (! CILK_SETJMP(m_resume_jmpbuf))
{
    // Change stack pointer to fiber stack
    JMPBUF_SP(m_resume_jmpbuf) = m_stack_base;
    CILK_LONGJMP(m_resume_jmpbuf);
}

// Verify that 1) 'this' is still valid and 2) '*this' has not been
// corrupted.
CILK_ASSERT(magic_number == m_magic);

// If the fiber that switched to me wants to be deallocated, do it now.
do_post_switch_actions();

// Now call the user proc on the new stack
m_start_proc(this);

// alloca() to force generation of frame pointer.  The argument to alloca
// is contrived to prevent the compiler from optimizing it away.  This
// code should never actually be executed.
int* dummy = (int*) alloca(sizeof(int) + (std::size_t) m_start_proc &amp; 0x1);
*dummy = 0xface;

// User proc should never return.
__cilkrts_bug("Should not get here");
</code></pre>

<p>}</p>

<p>```</p>

<p>上面是启动一个新“协程”的过程，在该调用之前，新的栈空间已经通过malloc分配好了，指针保存在变量m_stack_base中。下面的任务就是如何将运行栈切换到这个新的空间。</p>

<ul>
<li><p>首先来看 if 分支，也就是直接从 CILK_SETJMP 返回的情形：通过 JMPBUF_SP 这个宏，可以访问到刚刚保存的SP值，将其修改并指向新的地址 —— 注意这里只对SP进行了修改，没有修改BP值，也没有进行"栈拷贝"。</p></li>
<li><p>然后，通过 CILK_LONGJMP 跳转到修改后的状态 —— 执行线索切换到 if 分支后的代码 —— 注意，这时候 SP 已经切换成新值了，而 BP 还是原来的值 —— 根据之前的介绍，当前栈上的局部变量，包括函数的调用参数都通过“BP +/&ndash; 偏移量”进行访问，因此新的协程依然能访问到原来的栈变量、参数（<strong>注意：虽然run()方法本身没有参数，但由于是C++类方法，所以隐含了参数 this 指针，同时该对象的所有成员变量也依赖this指针才能访问到</strong>）。</p></li>
<li><p>新协程继续执行，调用 m_start_proc(this) 进入新的入口函数 —— 这时由于使用新的 SP，调用参数及新函数的执行栈就都在新的栈空间上分配了，也就完成了“栈切换”。</p></li>
</ul>


<h2>Fast Clone / Slow Clone</h2>

<p>如果说上面介绍的是 Cilkplus Runtime 协程机制的“普通”玩法，那么所谓的 “Fast Clone” / “Slow Clone” 就堪称 Cilkplus 协程机制的“文艺”玩法了。
该机制与Cilkplus的“Work Stealing”调度器一起，作为系统实现的精华，被各种介绍Cilkplus的文章反复提及，可以说是这门新语言的核心技术创新之一。</p>

<p>要分析  “Fast Clone” / “Slow Clone”，首先要了解一下 Cilkplus 的并行开发模型。
在Cilkplus中，主要提供了 <strong>cilk_spawn</strong> 和 <strong>cilk_sync</strong> 这两个关键字来处理并行任务的创建、同步执行线索的功能。</p>

<p><strong>cilk_spawn</strong> 关键字的语法主要有两种形式：</p>

<p><code>c++
int a = cilk_spawn foo(123); // 变量a记录foo(123)的返回值
cilk_spawn bar(); // bar() 没有返回值或忽略其返回值
</code></p>

<p><strong>cilk_spawn</strong> 关键字后面的函数调用会以单独的线索（“协程”）与原先的主线程并行执行，主线程需要在后面必要的位置插入 <strong>cilk_sync</strong> 语句进行显式同步操作：
比如上面例子中，主线程需要访问变量 a 的值时。
如果程序员没有显式提供<strong>cilk_sync</strong> 语句，编译器会在适当的位置插入同步语句。</p>

<p>对于一个程序，在多个线程上并行执行不同的部分是否能带来真正的性能提升，需要综合考量并行任务的粒度及其创建、同步等操作引入的额外开销，同时也要考量当前系统的负载情况 —— 这需要在运行过程中动态的判断。
如果一味将所有 spawn 的任务都分配新的线程执行，可能带来较大的开销而得不偿失。
为此，Cilkplus提出了一种动态优化的方案，即所谓的 “Fast Clone” / “Slow Clone”。</p>

<p>该方案的核心思想是，在 Spawn 一个新的执行线索后，并不马上为其创建新的执行线程，而是仅仅创建一个任务的执行状态（也就是“协程”）；
系统后台有若干个执行线程，会根据负载情况获取任务并执行。</p>

<p>具体来说，Cilkplus采用了一种“Work First”的执行策略，在Spawn时刻，首先将当前状态（通过setjmp机制）保存起来，然后当前线程直接去执行Spawn的任务，而原先“主线程”的执行状态就挂到当前工作线程的任务队列中：</p>

<ul>
<li><p>若此时有其他空闲的工作线程，则“窃取”挂起的“主线程”任务，（<em>通过long_jmp机制</em>）恢复其执行，这样就实现了真正的并行 —— 这就是所谓的“Slow Clone”（“慢版本”）；并行的任务通过“同步”操作合并，类似传统的“fork-join”模型，新任务（即原来的“主线程”）也就在同步点被释放了。</p></li>
<li><p>相反，如果挂起的任务没有被其他工作线程“窃取”，则当前线程执行完 Spawn 的任务后，会恢复之前挂起的任务，直接返回了“主线程”继续后续操作。
由于 Spawn 任务本身就是在原来执行线程上运行的，因此可以跳过同步操作，看起来好像与不使用 <strong>cilk_spawn</strong> 关键字时的效果一样，是一个串行的版本。这就是所谓的 “Fast Clone”（即“快版本”）。</p></li>
</ul>


<p>下面我们通过一个小例子来具体看一下 Cilkplus 编译器所作的“翻译”工作。</p>

<p>以下是原始的 cilkplus 程序：</p>

<p>``` c++
int fib(int n) {
  if (n &lt; 2)</p>

<pre><code>return n;
</code></pre>

<p>  int a = cilk_spawn fib(n-1);
  int b = fib(n-2);
  cilk_sync;
  return a + b;
}
```</p>

<p>下面是经编译器处理生成的程序，为了方便起见，这里用了伪代码表示：</p>

<p>``` c++
struct struct_anon {</p>

<pre><code>int n;
</code></pre>

<p>};
static void __cilk_spawn_helper_fib(struct_anon <em>agg, int </em>ret) {</p>

<pre><code>... ...
__cilk_helper_prologue();
*ret = fib(agg-&gt;n);
__cilk_helper_epilogue();
... ...
</code></pre>

<p>}
int fib (int n) {</p>

<pre><code>... ...
__cilkrts_stack_frame sf;
__cilk_parent_prologue(&amp;sf);
... ...
</code></pre>

<p>cilk.spawn.savestate:</p>

<pre><code>int a;
if (! SETJMP(&amp;sf.ctx))
    goto cilk.spawn.helpercall;
else
    goto cilk.spawn.continuation;
</code></pre>

<p>cilk.spawn.helpercall:</p>

<pre><code>struct struct_anon agg = { n - 1 };
__cilk_spawn_helper_fib(&amp;agg, &amp;a);
</code></pre>

<p>cilk.spawn.continuation:</p>

<pre><code>int b = fib(n-2);
</code></pre>

<p>cilk.sync.savestate:</p>

<pre><code>if (sf.flags &amp; CILK_FRAME_UNSYNCHED) {
    if (! SETJMP(sf.ctx))
        goto cilk.sync.call;
}
</code></pre>

<p>cilk.sync.exit:</p>

<pre><code>return a + b;
</code></pre>

<p>cilk.sync.call:</p>

<pre><code>__cilkrts_sync(&amp;sf);
goto cilk.sync.exit;
</code></pre>

<p>}
```</p>

<ul>
<li><p>首先，利用 setjmp 将当前“主线程”执行状态保存，然后 if 分支直接进入 _cilk_spawn_helper_fib 函数执行。</p></li>
<li><p>在_cilk_spawn_helper_fib 函数中，先调用 _cilk_helper_prologue，执行工作包括将刚才保存的任务放到任务队列中；然后执行真正的计算任务 fib；结束计算后，执行 _cilk_helper_epilogue 函数检查“主线程”任务是否已被“窃取”，决定后续执行的路径。</p></li>
<li><p>若任务没有被"窃取"，即执行“Fast Clone”，那么函数直接返回，继续计算 fib(n-2) &hellip;</p></li>
<li><p>否则，通过 long_jmp 机制跳转到 <strong>cilk.sync.savestate</strong> 处，由新任务保存的状态，完成最后的返回操作；另一方面，被窃取执行的新任务则执行 fib(n-2)，然后在 <strong>cilk.sync.savestate</strong> 处用 setjmp 保存执行状态，再执行 sync 操作 —— 之后，这个新任务就结束了，等待与之并行的那个 Spawn 的任务返回完成后续操作。</p></li>
</ul>


<p>我把上面这个流程花了一个草图，供大家参考：</p>

<p><img class="center" src="/images/2014/cilkrts_cg.jpeg"></p>

<h1>总结</h1>

<p>Cilkplus的运行时是我目前所知利用 setjmp / long_jmp 机制实现 &ldquo;N:M&rdquo; 协程系统的唯一实现，并且经过多年发展已经非常成熟。
目前，Cilkplus不仅为Intel自家的ICC编译器所支持，同时已合并到GCC主干，成为了GCC支持的语言。另外，基于Clang/LLVM的编译器也已经开源并已初具规模。</p>

<p>由于Cilkplus主要面向的高性能计算领域目前还是被Intel架构服务器所主宰，所以仅支持Intel X86 / X64 架构的策略暂时还无伤大雅。
但如果要实现一套更加通用的协程系统，那么依靠“setjmp / long_jmp”机制本身可能就比较困难了。</p>

<p>好了，今天的内容就是这些。下次将介绍基于“ucontext”的协程实现机制，敬请关注！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建C协程之概述]]></title>
    <link href="http://blog.amalcao.me/blog/2014/07/10/cyu-yan-xie-cheng-xi-tong-jie-shao-zhi-yi/"/>
    <updated>2014-07-10T15:23:40+08:00</updated>
    <id>http://blog.amalcao.me/blog/2014/07/10/cyu-yan-xie-cheng-xi-tong-jie-shao-zhi-yi</id>
    <content type="html"><![CDATA[<blockquote><p> <em>从本篇开始，打算开启一个系列，专门介绍C语言环境下各种协程系统的实现机制，算是对前阶段工作的一个系统总结吧！
目前的计划是根据实现机制的不同，分成两到三篇来介绍，具体的案例主要以 Go 和 Cilkplus 这两门语言的运行时环境为主，同时结合其他一些个人觉得比较有新意的小型开源系统。
另外，最近陆陆续续分析了很多开源并发系统的代码，希望也能抽时间好好总结一下。</em></p></blockquote>

<h1>什么是“协程”？</h1>

<p>“协程”（“coroutine”），有时也叫做“用户线程”、“纤程” （“fiber”）等，是一种轻量级用户执行线索，其特点是调度和切换都发生在用户态，无需内核干预，因此切换代价较小，特别适合实现一些高并发类的系统应用 —— 比如 Web 服务器 —— 每个链接的服务历程都可以用“协程”来实现，当某个链接遇到I/O阻塞时，可以快速切换到其他执行线索，从而大大提高了系统整体的吞吐率。</p>

<p>由于系统的调度器和执行线索都处于“用户态”，调度器通常无法中断某个运行中的“协程”，因此通常来说，“协程”的调度器往往采用“协作调度”策略 —— 即执行中的“协程” 需要显式调用类似<code>yeild</code> 这样的方法来让出处理器资源，以便其他任务执行。 这也就是“协程”得名的原因。</p>

<p>当然，对于一些语言，比如 Erlang，由于采用基于指令虚拟机的实现方式，调度器通常实现在虚拟机层，仍然能够控制用户级任务的执行，因此 Erlang 的轻量进程是采用“分时调度”的。但我们这里仅讨论一般意义上的“协程”，且主要基于C语言的实现，所以仍以“协作调度”为主。</p>

<h2>类似系统</h2>

<p>一种类似的方案是采用“异步+回调”的方式，比如<a href="http://libevent.org">libevent</a>，<a href="http://nodejs.org">node.js</a>之类框架，其本质是将用户任务的粒度降低到以函数为单位，系统后台启动多个工作线程，通过“事件驱动”的方式异步的从任务队列中取出并执行这些回调函数。</p>

<p>这类方案的底层系统实现起来相对比较简单，理论上也非常高效，但要求用户程序以异步方式编写，给用户程序开发、代码维护、调试等带来了一些问题。
而基于“协程”的系统，所有用户任务都是“同步”的，也就是完全按照实际执行时序编程，降低了用户程序开发、调试、维护的开销。</p>

<h1>基于C语言的实现模型</h1>

<p>早期的构建在C语言之上“协程”库往往仅包含一个执行的OS线程，多个用户任务都在该线程上分时执行，是一种 “N:1” 的映射模式。
典型的例子是<a href="http://swtch.com/libtask/">libtask</a>。由于调度器实际上是串行执行的，无需考虑复杂的线程同步问题，所以实现起来就比较简单。</p>

<p>近年来，随着多核乃至众核处理器的大规模出现和普及，使得原来基于 “N:1” 的模型无法满足系统的可扩展性需求。
因此业界提出了很多基于多核架构的协程系统方案，即所谓 “M:N” 模型 —— 多个“协程”可以映射到多个OS线程执行，也就是说在多核平台上，不同的“协程”能实现真正意义上的“并行”执行。</p>

<p>本质上来说，Google开发的Go语言和Intel主导开发的Cilkplus语言都是 “M:N” 的代表——虽然它们表面上都是新的语言，但调度器核心，即运行时环境（runtime）都是基于C（及部分C++）语言的。
所以，这两个runtime系统将作为“构建C协程”这个系列里，重点关注的对象。</p>

<h2>实现方式分类</h2>

<p>总结起来，用C语言实现协程的主要方案包括三类：</p>

<ol>
<li><p>利用标准C提供的<a href="http://en.wikipedia.org/wiki/Setjmp">setjmp/long_jmp</a>机制，比如<a href="https://code.google.com/p/libconcurrency/">libconcurrency</a>，以及前面讲的<a href="https://github.com/cilkplus/compiler-rt/tree/cilkplus/lib/cilk">Cilkplus的运行时环境</a>均属此类。<strong>这种方式的优点是可移植性好，理论上只要平台提供C标准库就可以移植，并且“协程”切换效率相对比较高。但同时，对其流程把握通常比较困难，也很难为每个协程实现独立的运行栈。</strong></p></li>
<li><p>利用GNU C库提供的<a href="http://en.wikipedia.org/wiki/Setcontext">ucontext</a>机制；或者使用Windows平台提供的<a href="http://en.wikipedia.org/wiki/Fiber_(computer_science">Fiber</a>机制。<strong>这种方式的优点是流程清晰，编程思路简单；但是可移植性和切换效率欠佳。</strong></p></li>
<li><p>利用C的switch/goto等语句的巧妙组合，可以用少量的代码实现简单的协程支持，比如<a href="http://dunkels.com/adam/pt/index.html">Protothreads</a>项目，其实现非常简单，号称“蝇量级”。<strong>但可扩展性不好，不适合移植到多核等复杂系统，因此就不在本系列中详述了，感兴趣者请参考 &ldquo;Protothreads&rdquo; <a href="http://dunkels.com/adam/download">代码</a>及相关<a href="http://coolshell.cn/articles/10975.html">分析</a>。</strong></p></li>
</ol>


<p>在后续的文章中，我会针对前两种实现进行分析，主要的参考是采用“setjmp/long_jmp”实现的 Cilkplus 运行时库 <strong>libcilkrts</strong>（Linux版），以及采用“ucontext”实现的 GCC Go 前端运行时库 <strong>libgo</strong> 。 敬请关注！</p>
]]></content>
  </entry>
  
</feed>
